// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Unicode char > should correctly unicode value 1`] = `
{
  "body": {
    "charCode": 97,
    "end": 6,
    "kind": "Char",
    "start": 1,
    "type": "Unicode",
    "value": "a",
  },
  "end": 7,
  "flags": "",
  "kind": "Regexp",
  "start": 0,
}
`;

exports[`Unicode char > should fallback to char sequence, if octal value is out of range 1`] = `
{
  "body": {
    "end": 6,
    "expressions": [
      {
        "charCode": 117,
        "end": 2,
        "kind": "Char",
        "start": 1,
        "type": "Escaped",
        "value": "u",
      },
      {
        "charCode": 102,
        "end": 3,
        "kind": "Char",
        "start": 3,
        "type": "Simple",
        "value": "f",
      },
      {
        "charCode": 102,
        "end": 4,
        "kind": "Char",
        "start": 4,
        "type": "Simple",
        "value": "f",
      },
      {
        "charCode": 102,
        "end": 5,
        "kind": "Char",
        "start": 5,
        "type": "Simple",
        "value": "f",
      },
      {
        "charCode": 103,
        "end": 6,
        "kind": "Char",
        "start": 6,
        "type": "Simple",
        "value": "g",
      },
    ],
    "kind": "Alternative",
    "start": 1,
  },
  "end": 7,
  "flags": "",
  "kind": "Regexp",
  "start": 0,
}
`;

exports[`Unicode char > should fallback to char sequence, if there is not enough chars > with char at the end 1`] = `
{
  "body": {
    "end": 7,
    "expressions": [
      {
        "charCode": 117,
        "end": 2,
        "kind": "Char",
        "start": 1,
        "type": "Escaped",
        "value": "u",
      },
      {
        "charCode": 48,
        "end": 3,
        "kind": "Char",
        "start": 3,
        "type": "Simple",
        "value": "0",
      },
      {
        "charCode": 48,
        "end": 4,
        "kind": "Char",
        "start": 4,
        "type": "Simple",
        "value": "0",
      },
      {
        "charCode": 54,
        "end": 5,
        "kind": "Char",
        "start": 5,
        "type": "Simple",
        "value": "6",
      },
      {
        "charCode": 97,
        "end": 7,
        "kind": "Char",
        "start": 6,
        "type": "Escaped",
        "value": "a",
      },
    ],
    "kind": "Alternative",
    "start": 1,
  },
  "end": 8,
  "flags": "",
  "kind": "Regexp",
  "start": 0,
}
`;

exports[`Unicode char > should fallback to char sequence, if there is not enough chars > with regexp end at the end 1`] = `
{
  "body": {
    "end": 5,
    "expressions": [
      {
        "charCode": 117,
        "end": 2,
        "kind": "Char",
        "start": 1,
        "type": "Escaped",
        "value": "u",
      },
      {
        "charCode": 48,
        "end": 3,
        "kind": "Char",
        "start": 3,
        "type": "Simple",
        "value": "0",
      },
      {
        "charCode": 48,
        "end": 4,
        "kind": "Char",
        "start": 4,
        "type": "Simple",
        "value": "0",
      },
      {
        "charCode": 54,
        "end": 5,
        "kind": "Char",
        "start": 5,
        "type": "Simple",
        "value": "6",
      },
    ],
    "kind": "Alternative",
    "start": 1,
  },
  "end": 6,
  "flags": "",
  "kind": "Regexp",
  "start": 0,
}
`;
